syntax = "proto3";
package cabal;

import "orders.proto";
import "txncb.proto";
import "common.proto";
import "copytrade.proto";





service CabalRpc {
  rpc UserActivityUni(UserActionSub) returns (stream UserResponse) {}
  rpc TradesUni(TradeEventSub) returns (stream TradeEventResponse) {}
  rpc SubscribeToken(TokenTradeEventSub) returns (TradeResponse) {}
  rpc TradePing(Ping) returns (Pong) {}
  rpc UserPing(Ping) returns (Pong) {}
  rpc MarketSell(Sell) returns (TradeResponse) {}
  rpc MarketBuy(Buy) returns (TradeResponse) {}
  rpc SellInitials(SellInit) returns (TradeResponse) {}
  rpc GetTokenLimitOrders(common.TokenAddress) returns (orders.TokenLimitOrders) {}
  rpc PlaceLimitOrders(orders.TokenLimitOrders) returns (orders.PlaceLimitOrdersResponse) {}
  rpc DeleteLimitOrders(orders.DeleteOrders) returns (orders.PlaceLimitOrdersResponse) {}
  rpc ClearLimitOrders(orders.ClearLimitOrders) returns (orders.ClearLimitOrdersResponse) {}
  rpc FetchStateInfo(FetchInfo) returns (FetchInfoResponse) {}
  rpc ChangeApiKey(ApiKeyReq) returns (ApiKeyResp) {}
  rpc TxnProcsStat(TxnProcsStatReq) returns (TxnProcsStatsProto) {}
  rpc GetTokenStatus(TokenStatusRequest) returns (TokenStatus) {}
  rpc GetTokenTradeStats(TokenTradeStatsReq) returns (TokenTradeStats) {}
  rpc GetTokenPositions(TokenPositionsReq) returns (TokenPositions) {}
  rpc GetTokenPositionsUi(TokenPositionsUiReq) returns (TokenPositionsUi) {}
  rpc MakeWithdraw(MakeWithdrawReq) returns (MakeWithdrawResp) {}
  rpc GetRefState(GetRefStateReq) returns (RefStateData) {}
  rpc WithdrawRef(WithdrawRefReq) returns (WithdrawRefResp) {}
  rpc RegisterRef(RegisterRefReq) returns (RegisterRefResp) {}

  //Copytrade
  rpc CtNewCfg(copytrade.CopyTradeConfigProto) returns (copytrade.GenericSetResponse);
  rpc CtGetCfgs(copytrade.GetCfgIds) returns (copytrade.CtCfgIds);
  rpc CtGetCfg(copytrade.GetCfg) returns (copytrade.CopyTradeConfigProto);
  // Bool fields
  rpc CtCfgSetIsOn(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetBuyFreeze(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetPump(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetRayAmm(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetRayCpmm(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetPumpAmm(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetRayLl(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetUseLimitOrders(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetBlacklist(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetReverseBuy(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetReverseSell(copytrade.BoolFieldRequest) returns (copytrade.GenericSetResponse);

  // String fields
  rpc CtCfgSetName(copytrade.StringFieldRequest) returns (copytrade.GenericSetResponse);

  // Enums
  rpc CtCfgSetBuyMode(copytrade.BuyModeFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetSellMode(copytrade.SellModeFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetFollowBuys(copytrade.FollowBuysFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgetFollowSells(copytrade.FollowSellsFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetTxnProc(copytrade.TxnProcFieldRequest) returns (copytrade.GenericSetResponse);

  // Uint64 fields
  rpc CtCfgSetBuyAmount(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetBuyAmountPercBps(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetMinBuy(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetMaxBuy(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetBuyTip(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetSellTip(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetBuyFee(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetSellFee(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetMinAge(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetMaxAge(copytrade.Uint64FieldRequest) returns (copytrade.GenericSetResponse);

  // Uint32 fields
  rpc CtCfgSetSellAmountPercBps(copytrade.Uint32FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetBuySlippageBps(copytrade.Uint32FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetSellSlippageBps(copytrade.Uint32FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetMaxSlotLatencyBuy(copytrade.Uint32FieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetMaxSlotLatencySell(copytrade.Uint32FieldRequest) returns (copytrade.GenericSetResponse);

  // Float fields
  rpc CtCfgSetMinMcap(copytrade.FloatFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetMaxMcap(copytrade.FloatFieldRequest) returns (copytrade.GenericSetResponse);

  // Repeated fields
  rpc CtCfgSetLimitOrders(copytrade.LimitOrdersFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetCopyWallets(copytrade.StringsFieldRequest) returns (copytrade.GenericSetResponse);
  rpc CtCfgSetTokenBuys(copytrade.StringsFieldRequest) returns (copytrade.GenericSetResponse);

  // Getters for repeated fields
  rpc CtGetCopyWallets(copytrade.GetRepeatedStringsRequest) returns (copytrade.GetRepeatedStringsResponse);
  rpc CtGetTokenBuys(copytrade.GetRepeatedStringsRequest) returns (copytrade.GetRepeatedStringsResponse);
}


message TokenTradeStatsReq {
  string mint = 1;
}
message TokenPositionsReq {}
//TOP 20 token positions
message TokenPositions {
  repeated TokenPosition v = 1;
}
message TokenPositionsUiReq {
  optional string mint = 1;
}
message TokenPosition {
  string mint = 1;
  string ticker = 2; 
  optional string pnl =3;
  uint64 quote_value = 4;
  common.QuoteKind qoute_kind =5;
  uint32 orders_num = 6;
  uint64 last_traded_slot = 7;
} 

message TokenPositionsUi {
  TokenTradeStats selected =1;
  TokenPositions positions =2;
}

message MakeWithdrawReq {
  string destination = 1;
  uint64 amount = 2;
}
message MakeWithdrawResp {
  string sig = 1;
  uint64 fee = 2;
}

message WithdrawRefReq {
  string destination = 1;
}
message WithdrawRefResp {
  repeated string sigs = 1;
}
message GetRefStateReq {}

message RefStateData {
  bool init = 1;
  string authority = 2; // Pubkey as base58 string
  uint64 user_id = 3;
  optional uint64 upline = 4;
  ReferrerCom ref_tier = 5;
  uint64 earnings_lt_lvl_1 = 6;
  uint64 earnings_lt_lvl_2 = 7;
  uint64 earnings_lt_lvl_3 = 8;
  uint64 vol_lvl_1 = 9;
  uint64 vol_lvl_2 = 10;
  uint64 vol_lvl_3 = 11;
  uint64 unclaimed_sol = 12;
  uint32 referrals_lvl_1 = 13;
  uint32 referrals_lvl_2 = 14;
  uint32 referrals_lvl_3 = 15;
  uint64 ref_buy_volume = 16;
  uint64 ref_sell_volume = 17;
  uint64 ref_buys = 18;
  uint64 ref_sells = 19;
  uint64 last_nonce = 20;
  uint64 sell_amount = 21;
  uint64 buy_amount = 22;
  uint64 buy_trades = 23;
  uint64 sell_trades = 24;
}

message ReferrerCom {
  oneof kind {
    Normal normal = 1;
    Custom custom = 2;
  }
}
message Normal {}

message Custom {
  bytes code = 1; // 3-byte fixed-size array of % values 
}

message RegisterRefReq {}
message RegisterRefResp {
  repeated string sigs = 1;
}


message TxnProcsStatReq {}

message TxnProcsStatsProto {
  ProcessorStatsProto jito_validators = 1;
  ProcessorStatsProto cabal = 2;
  ProcessorStatsProto bloxroute = 3;
  ProcessorStatsProto nozomi = 4;
  ProcessorStatsProto next_block = 5;
  ProcessorStatsProto slot0 = 6;
  ProcessorStatsProto astra = 7;
}


message ProcessorStatsProto {
  uint64 total_slot_lat = 1;
  uint64 sent_txn_count = 2;
  uint64 landed_txn_count = 3;
  uint64 error_txn_count = 4;
  uint64 prio_fee = 5;
  uint64 tip = 6;
}

message FetchInfo {}
message ApiKeyReq {
  string key = 1;
}
message ApiKeyResp {}

message FetchInfoResponse {
  string wallet = 1;
  uint64 balance = 2;
  uint32 limit_orders_num =3;
}

message UserResponse {
  oneof user_response_kind {
    TokenTradeStats trade_stats = 2;
    txncb.LandedTxnState txn_cb =3;
    txncb.TxnConfirmState txn_cs =4;
    Ping ping = 5;
    Pong pong = 6;
  }
}



message TradeEventSub {}
message UserActionSub {}

message TradeEventRequest {
  oneof trade_event_request_kind {
    TokenTradeEventSub sub = 1;
    Ping ping = 2;
    Pong pong = 3;
  }
}
message TokenTradeEventSub {
  string mint = 1;
}


message TokenStatusRequest {
  string mint = 1;
}

message TradeEventResponse {
  oneof trade_event_response_kind {
    TradeEvent trade_event =1;
    TokenStatus token_status =2;
    Ping ping = 3;
    Pong pong = 4;
  }
}

message Ping {
  uint64 count = 1;
}

message Pong{
  uint64 count = 1;
}

enum UserTradeStatus {
  accepted = 0;
  rejected = 1;
}

message TradeResponse {
  uint64 slot = 2;
}

message TokenTradeStats {
  string mint = 1;
  uint64 token_balance = 2;
  uint64 buy_qoute = 3;
  uint64 sell_qoute = 4;
  uint64 buy_base = 5;
  uint64 sell_base = 6;
  uint32 buys = 7;
  uint32 sells = 8;
  uint64 sol_balance =9;
  uint64 last_traded_slot =10;
  uint32 token_decimals = 11;
  uint32 quote_decimals = 12;
  common.QuoteKind qoute_kind =13;
  uint64 quote_pos = 14;  
}


message TokenStatus {
    string mint = 1;
    string pool_id = 2;
    PoolKind pool_kind = 3;
    MigrationStatus migration_status = 4;
    uint64 supply = 5;
    uint64 base_liq = 6;
    uint64 quote_liq = 7;
    common.QuoteKind qoute_kind =8;
    optional uint32 tax_bps = 9;
    string ticker = 10;
    string name = 11;
    uint32 base_dec = 12;
    uint32 quote_dec =13;
    optional string mint_auth = 14;
    optional string freeze_auth = 15;
    repeated Social socials = 16;
    uint64 base_liq_v = 17;
    uint64 quote_liq_v = 18;
}
message Social {
  string name =1;
  string value =2;
}
enum MigrationStatus {
  migrated = 0;
  migrating = 1;
  pre_migration = 2;
  non_migratable = 3;
}
enum PoolKind {
  pump = 0;
  ray_amm = 1;
  moonshot = 2;
  meteora = 3;
  ray_clmm = 4;
  ray_cpmm = 5;
  pump_amm = 6;
  ray_ll = 7;
}




message TradeEvent {
  oneof trade_event_kind {
    TradeEventData buy = 1;
    TradeEventData sell = 2;
    TradeEventData deposit = 3;
    TradeEventData withdraw = 4;
    TradeEventData migration_start =5;
    TradeEventData migration_end =6;
    BurnEventData burn_liq = 7;
    BurnEventData burn_mint = 8;
  }
}

message TradeEventData {
  uint64 amount_sol =1;
  uint64 base_liq = 2;
  uint64 quote_liq = 3;
  PoolKind pool_kind =4;
}

message BurnEventData {
  uint64 amount = 1;
  uint64 left = 2;
}



message Buy {
  uint64 amount = 1;
  string mint = 2;  
  uint32 slippage_bps = 3; // fract 0 - 1
  uint64 tip = 4;
  common.TransactionProcessors procs = 5;
  optional uint64 priority_fee = 6; // lamports
  optional uint32 slot_latency = 7;
  optional common.UnixTimestamp expire_at =8; // Utc timestamp in seconds
  optional uint64 nonce = 9;
  optional uint32 max_price_impact_bps = 10;
  repeated orders.ApiOrder auto_limits = 11;
  optional common.QuoteKind qoute_kind = 12;
}

message Sell {
  uint32 amount_bps = 1; // fract 0 - 1
  string mint = 2;  
  uint32 slippage_bps  = 3; // fract 0 - 1
  uint64 tip = 4;
  common.TransactionProcessors procs = 5;
  optional uint64 priority_fee = 6; // lamports
  optional uint32 slot_latency = 7;
  optional common.UnixTimestamp expire_at =8;  // Utc timestamp in seconds
  optional uint64 nonce = 9;
  optional uint32 max_price_impact_bps = 10;
  repeated orders.ApiOrder auto_limits = 11;
}

message SellInit {
  string mint = 2;  
  uint32 slippage_bps  = 3; // fract 0 - 1
  uint64 tip = 4;
  common.TransactionProcessors procs = 5;
  optional uint64 priority_fee = 6; // lamports
  optional uint32 slot_latency = 7;
  optional common.UnixTimestamp expire_at =8;  // Utc timestamp in seconds
  optional uint64 nonce = 9;
  optional uint32 max_price_impact_bps = 10;
  repeated orders.ApiOrder auto_limits = 11;
}

// message UserAction {
//   oneof user_action_kind {
//     Buy buy = 1;
//     Sell sell = 2;
//     TokenTradeStats token_trade_stats =3;
//     Ping ping = 4;
//     Pong pong = 5;
//   }
// }